// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Blogs {
  blog_ID String @id @default(uuid())
  user_ID String
  name    String
  image   String
  url     String
  profile Profile @relation(fields: [user_ID], references: [user_ID], onDelete: Cascade)
}

model Certificates {
  certificate_ID  String @id @default(uuid())
  user_ID         String
  name            String
  image           String
  workload        String?
  instructor      String?
  institution     String?
  conclusion      String
  type            String
  score           String?
  sharingLink     String?
  area            String
  profile         Profile @relation(fields: [user_ID], references: [user_ID], onDelete: Cascade)
  area_ID          CertificateAreas @relation(fields: [area], references: [area_ID], onDelete: Cascade)
  type_ID           CertificateTypes @relation(fields: [type], references: [type_ID], onDelete: Cascade)
}

model CertificateAreas {
  area_ID         String @id @default(uuid())
  areaDescription String
  certificates    Certificates[]
}

model CertificateTypes {
  type_ID         String @id @default(uuid())
  typeDescription String
  certificates    Certificates[]
}

model Education {
  education_ID  String @id @default(uuid())
  user_ID       String
  periodStart   DateTime
  periodEnd     DateTime
  title         String
  institution   String
  profile       Profile @relation(fields: [user_ID], references: [user_ID], onDelete: Cascade)
}

model Experiences {
  experience_ID String @id @default(uuid())
  user_ID       String
  periodStart   DateTime
  periodEnd     DateTime
  title         String
  institution   String
  profile       Profile @relation(fields: [user_ID], references: [user_ID], onDelete: Cascade)
}

model Expertises {
  expertise_ID  String @id @default(uuid())
  user_ID       String
  title         String
  text          String
  color         String
  icon          String
  profile       Profile @relation(fields: [user_ID], references: [user_ID], onDelete: Cascade)
  icon_ID       Icons @relation(fields: [icon], references: [icon_ID], onDelete: Cascade)
}

model Icons {
  icon_ID     String @id @default(uuid())
  description String
  expertises  Expertises[]
  menuItems   MenuItems[]
  networks    Networks[]
  profileInfo ProfileInfo[]
}

model Knowledges {
  knowledge_ID  String @id @default(uuid())
  user_ID       String
  description   String
  profile       Profile @relation(fields: [user_ID], references: [user_ID], onDelete: Cascade)
}

model MenuItems {
  menuItem_ID String @id @default(uuid())
  user_ID     String
  label       String
  icon        String
  to          String
  profile     Profile @relation(fields: [user_ID], references: [user_ID], onDelete: Cascade)
  icon_ID     Icons @relation(fields: [icon], references: [icon_ID], onDelete: Cascade)
}

model Networks {
  network_ID  String @id @default(uuid())
  user_ID     String
  title       String
  link        String
  icon        String
  profile     Profile @relation(fields: [user_ID], references: [user_ID], onDelete: Cascade)
  icon_ID     Icons @relation(fields: [icon], references: [icon_ID], onDelete: Cascade)
}

model Profile {
  user_ID         String @id @default(uuid())
  name            String
  role            String
  image           String
  curriculum      String
  blogs           Blogs[]
  certificates    Certificates[]
  education       Education[]
  experiences     Experiences[]
  expertises      Expertises[]
  knowledges      Knowledges[]
  menuItems       MenuItems[]
  profileInfo     ProfileInfo[]
  networks        Networks[]
  testimonials    Testimonials[]
  workingSkills   Skills[]
}

model ProfileInfo {
  profileInfo_ID  String @id @default(uuid())
  user_ID         String
  label           String
  link            String?
  data            String
  icon            String
  profile         Profile @relation(fields: [user_ID], references: [user_ID], onDelete: Cascade)
  icon_ID         Icons @relation(fields: [icon], references: [icon_ID], onDelete: Cascade)
}

model Testimonials {
  testimonial_ID  String @id @default(uuid())
  user_ID         String
  name            String
  role            String
  image           String
  quote           String
  profile         Profile @relation(fields: [user_ID], references: [user_ID], onDelete: Cascade)
}

model Skills {
  skill_ID    String @id @default(uuid())
  user_ID     String
  description String
  percentage  Int
  profile     Profile @relation(fields: [user_ID], references: [user_ID], onDelete: Cascade)
}
